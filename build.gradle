
buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:2.1.4.RELEASE"
  }
}

plugins {
  id "io.freefair.lombok" version "4.1.6" apply false
  id "io.spring.dependency-management" version "1.0.8.RELEASE"
}

def versions = [
  jackson: "2.9.8",
  jakartaPersistence: "2.2.3",
  jakartaValidation: "2.0.2",
  javaxPersistence: "2.2",
  javaxValidation: "2.0.1.Final",
  mockito: "2.20.1",
  mysqlConnector: "8.0.16",
  neo4j: "4.0.0",
  neo4jBoltDriver: "3.2.5",
  springBoot: "2.2.2.RELEASE",
  springDataJpa: "2.2.3.RELEASE",
  springDataNeo4j: "2.2.2.RELEASE",
  springFramework: "5.2.2.RELEASE",
  springKafka: "2.4.0.RELEASE",
  springfoxSwagger2: "2.9.2",
  springfoxSwaggerUi: "2.9.2",
  springCloud: "Hoxton.SR1"
]

allprojects {

  apply plugin: "java"
  apply plugin: "io.spring.dependency-management"
  apply plugin: "io.freefair.lombok"

  configurations {
    developmentOnly
    runtimeClasspath {
      extendsFrom developmentOnly
    }
  }

  dependencyManagement {
    imports {
      mavenBom "org.junit:junit-bom:5.5.1"
      mavenBom "org.springframework.boot:spring-boot-dependencies:$versions.springBoot"
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:$versions.springCloud"
    }
  }

  version "1.0.0-SNAPSHOT"
  group "cc.vivp.bankrupt"

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    jcenter()
  }
}

project(":service-payment-producer") {

  dependencies {
    implementation project(":domain-models")
    implementation project(":component-data-repositories")
    implementation project(":commons")
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.kafka:spring-kafka:$versions.springKafka"
    implementation "io.springfox:springfox-swagger2:$versions.springfoxSwagger2"
    implementation "io.springfox:springfox-swagger-ui:$versions.springfoxSwaggerUi"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-ribbon"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    runtimeOnly "mysql:mysql-connector-java:$versions.mysqlConnector"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.mockito:mockito-junit-jupiter:$versions.mockito"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
  }

  test {
    useJUnitPlatform()
  }

}

project(":worker-payment-consumer") {

  dependencies {
    implementation project(":domain-models")
    implementation project(":component-data-repositories")
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.kafka:spring-kafka:$versions.springKafka"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    runtimeOnly "mysql:mysql-connector-java:$versions.mysqlConnector"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.mockito:mockito-junit-jupiter:$versions.mockito"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
  }

  test {
    useJUnitPlatform()
  }

}

project(":component-data-repositories") {

  dependencies {
  	implementation project(":domain-models")
    implementation "org.springframework.data:spring-data-jpa:$versions.springDataJpa"
    implementation "javax.persistence:javax.persistence-api:$versions.javaxPersistence"
  }
}

project(":domain-models") {

  apply plugin: "io.freefair.lombok"

  dependencies {
    implementation "javax.validation:validation-api:$versions.javaxValidation"
    implementation "org.springframework:spring-web:$versions.springFramework"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$versions.jackson"
    implementation "javax.persistence:javax.persistence-api:$versions.javaxPersistence"
  }
}

project(":service-transaction-management") {

  dependencies {
    implementation project(":domain-models")
    implementation project(":component-data-repositories")
    implementation project(":commons")
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "io.springfox:springfox-swagger2:$versions.springfoxSwagger2"
    implementation "io.springfox:springfox-swagger-ui:$versions.springfoxSwaggerUi"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-ribbon"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    runtimeOnly "mysql:mysql-connector-java:$versions.mysqlConnector"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.mockito:mockito-junit-jupiter:$versions.mockito"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
  }

  test {
    useJUnitPlatform()
  }

}

project(":commons") {

  dependencies {
    implementation project(":domain-models")
    implementation "org.springframework:spring-webmvc:$versions.springFramework"
    implementation "javax.persistence:javax.persistence-api:$versions.javaxPersistence"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$versions.jackson"
  }
}
// ==================================================NEW ARCHITECTURE
project(":naming-server") {

  dependencies {
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.cloud:spring-cloud-starter-config"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
  }
}

project(":api-gateway") {

  dependencies {
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-zuul"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.cloud:spring-cloud-starter-config"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
  }
}

project(":domain-model") {
}

project(":common") {

  dependencies {
    implementation "jakarta.validation:jakarta.validation-api:$versions.jakartaValidation"
  }
}

project(":core") {

  dependencies {
    implementation project(":domain-model")
    implementation project(":common")
    implementation "org.springframework.data:spring-data-jpa:$versions.springDataJpa"
  }
}

project("adapters:persistence") {

  dependencies {
    implementation project(":domain-model")
    implementation project(":core")
    implementation "jakarta.persistence:jakarta.persistence-api:$versions.jakartaPersistence"
    implementation "org.springframework.data:spring-data-jpa:$versions.springDataJpa"
    implementation "org.neo4j:neo4j-ogm-bolt-driver:$versions.neo4jBoltDriver"
    implementation "org.springframework.boot:spring-boot-starter-data-neo4j:$versions.springDataNeo4j"
    runtimeOnly "org.springframework.boot:spring-boot-starter-data-jpa"
  }
}

project("adapters:api") {

  dependencies {
    implementation project(":domain-model")
    implementation project(":core")
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-ribbon"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    runtimeOnly project(":adapters:persistence")
    runtimeOnly "mysql:mysql-connector-java:$versions.mysqlConnector"
  }
}
